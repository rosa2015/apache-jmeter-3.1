<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="印尼" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">13557710000</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="断言结果" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <stringProp name="CookieManager.policy">standard</stringProp>
        <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.proxyHost">192.168.2.115</stringProp>
        <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">dev-sit-ind.pinganzhiyuan.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">47.104.109.123 abtest-pub-api.pinganzhiyuan.com   192.168.2.183</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">84  8580 8690</stringProp>
          </elementProp>
          <elementProp name="user-agent" elementType="Argument">
            <stringProp name="Argument.name">user-agent</stringProp>
            <stringProp name="Argument.value">Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; Nexus 5X Build/OPM4.171019.016.A1) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="platform" elementType="Argument">
            <stringProp name="Argument.name">platform</stringProp>
            <stringProp name="Argument.value">android</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">android  ios</stringProp>
          </elementProp>
          <elementProp name="packageName" elementType="Argument">
            <stringProp name="Argument.name">packageName</stringProp>
            <stringProp name="Argument.value">com.mudah.uang</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">com.dk.goppo com.mypanda.credit（ios）;com.pandamy.credit(android)</stringProp>
          </elementProp>
          <elementProp name="version" elementType="Argument">
            <stringProp name="Argument.name">version</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1 12线下版本14</stringProp>
          </elementProp>
          <elementProp name="channelKey" elementType="Argument">
            <stringProp name="Argument.name">channelKey</stringProp>
            <stringProp name="Argument.value">16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ios 13  adnroid14</stringProp>
          </elementProp>
          <elementProp name="countryCode" elementType="Argument">
            <stringProp name="Argument.name">countryCode</stringProp>
            <stringProp name="Argument.value">086</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobileIP" elementType="Argument">
            <stringProp name="Argument.name">mobileIP</stringProp>
            <stringProp name="Argument.value">api.xindedata.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">  pub-api.pinganzhiyuan.com 47.104.109.123</stringProp>
          </elementProp>
          <elementProp name="ip2" elementType="Argument">
            <stringProp name="Argument.name">ip2</stringProp>
            <stringProp name="Argument.value">log-gather-prod.pinganzhiyuan.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http" elementType="Argument">
            <stringProp name="Argument.name">http</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port2" elementType="Argument">
            <stringProp name="Argument.name">port2</stringProp>
            <stringProp name="Argument.value">86</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">86</stringProp>
          </elementProp>
          <elementProp name="code_phone" elementType="Argument">
            <stringProp name="Argument.name">code_phone</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceToken" elementType="Argument">
            <stringProp name="Argument.name">deviceToken</stringProp>
            <stringProp name="Argument.value">f3d96a07-1d92-4534-84fa-f4688e8da4ae</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceInfo" elementType="Argument">
            <stringProp name="Argument.name">deviceInfo</stringProp>
            <stringProp name="Argument.value">{&quot;test&quot;:true}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="channelCode" elementType="Argument">
            <stringProp name="Argument.name">channelCode</stringProp>
            <stringProp name="Argument.value">110012222</stringProp>
            <stringProp name="Argument.desc">ios 13  adnroid14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deviceId" elementType="Argument">
            <stringProp name="Argument.name">deviceId</stringProp>
            <stringProp name="Argument.value">99e0139b67a64ad288972c5844254026</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appName" elementType="Argument">
            <stringProp name="Argument.name">appName</stringProp>
            <stringProp name="Argument.value">Mudah Uang</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">pub-api.id-aifintech.cc
dev-sit-ind.pinganzhiyuan.com</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="登录&amp;实名相关变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">133${__RandomString(7,1234567890,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">133${__RandomString(7,1234567890,)}</stringProp>
          </elementProp>
          <elementProp name="idCardNo" elementType="Argument">
            <stringProp name="Argument.name">idCardNo</stringProp>
            <stringProp name="Argument.value">3${__RandomString(15,1234567890,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3506042602660001</stringProp>
          </elementProp>
          <elementProp name="idCardName" elementType="Argument">
            <stringProp name="Argument.name">idCardName</stringProp>
            <stringProp name="Argument.value">rosa${__RandomString(4,1234567890,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SULISTYONO</stringProp>
          </elementProp>
          <elementProp name="risk_user" elementType="Argument">
            <stringProp name="Argument.name">risk_user</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="risk_pwd" elementType="Argument">
            <stringProp name="Argument.name">risk_pwd</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="图片相关局部变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="type" elementType="Argument">
            <stringProp name="Argument.name">type</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="extra_param" elementType="Argument">
            <stringProp name="Argument.name">extra_param</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="picPath" elementType="Argument">
            <stringProp name="Argument.name">picPath</stringProp>
            <stringProp name="Argument.value">C:\Users\haihong\Desktop\pic</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="银行卡相关变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="cardNo" elementType="Argument">
            <stringProp name="Argument.name">cardNo</stringProp>
            <stringProp name="Argument.value">2${__RandomString(6,1234567890,)}</stringProp>
            <stringProp name="Argument.desc">2${__RandomString(6,1234567890,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="state" elementType="Argument">
            <stringProp name="Argument.name">state</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.desc">审核结果，false，failmessage必填</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="failMessage" elementType="Argument">
            <stringProp name="Argument.name">failMessage</stringProp>
            <stringProp name="Argument.value">${__RandomString(10,当时解放军的sajHJDSJAHD发动核打击发货0123456789,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_bank" elementType="Argument">
            <stringProp name="Argument.name">code_bank</stringProp>
            <stringProp name="Argument.value">PERMATA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">2367767 放款失败银行卡</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="通讯录认证" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="contacts" elementType="Argument">
            <stringProp name="Argument.name">contacts</stringProp>
            <stringProp name="Argument.value">{     &quot;contacts&quot;:[         {             &quot;contactId&quot;:&quot;5&quot;,             &quot;displayName&quot;:&quot;飞飞&quot;,             &quot;firstName&quot;:&quot;飞飞&quot;,             &quot;homeNum&quot;:&quot;18211124909&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298322&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;38&quot;,             &quot;displayName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;firstName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298430&quot;,             &quot;mobile&quot;:&quot;13939665068&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;42&quot;,             &quot;displayName&quot;:&quot;北京社保&quot;,             &quot;firstName&quot;:&quot;北京&quot;,             &quot;lastName&quot;:&quot;社保&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298433&quot;,             &quot;mobile&quot;:&quot;01012333&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;55&quot;,             &quot;displayName&quot;:&quot;263企业会议&quot;,             &quot;lastName&quot;:&quot;263企业会议&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298448&quot;,             &quot;mobile&quot;:&quot;01056161166&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;75&quot;,             &quot;displayName&quot;:&quot;新能源客服&quot;,             &quot;firstName&quot;:&quot;新能源客服&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456&quot;,             &quot;mobile&quot;:&quot;81562552&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         }     ] }</stringProp>
            <stringProp name="Argument.desc">联系人</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="emerContacts" elementType="Argument">
            <stringProp name="Argument.name">emerContacts</stringProp>
            <stringProp name="Argument.value">{emergencyContactList:[     {   &quot;relation&quot;: &quot;200101&quot;, &quot;mobile&quot;: &quot;18618486817&quot;,   &quot;name&quot;: &quot;rosa&quot;      },      {         &quot;relation&quot;: &quot;200102&quot;,         &quot;mobile&quot;: &quot;64508053&quot;,          &quot;name&quot;: &quot;whh&quot;     }, 	{         &quot;relation&quot;: &quot;200103&quot;,         &quot;mobile&quot;: &quot;6450805912&quot;,          &quot;name&quot;: &quot;chen&quot;     }  ]}</stringProp>
            <stringProp name="Argument.desc">联系人格式[     {          &quot;relation&quot;: &quot;friends&quot;,         &quot;mobile&quot;: &quot;18618486817&quot;,          &quot;name&quot;: &quot;rosa&quot;      },      {         &quot;relation&quot;: &quot;colleagues&quot;,         &quot;mobile&quot;: &quot;64508053&quot;,          &quot;name&quot;: &quot;whh&quot;     }, 	{         &quot;relation&quot;: &quot;schoolmate&quot;,         &quot;mobile&quot;: &quot;6450805912&quot;,          &quot;name&quot;: &quot;chen&quot;     }  ]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="客户基本信息认证" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="personInfo" elementType="Argument">
            <stringProp name="Argument.name">personInfo</stringProp>
            <stringProp name="Argument.value">{     &quot;birthday&quot;:&quot;2003-02-09&quot;,     &quot;education&quot;:&quot;300101&quot;,     &quot;religion&quot;:&quot;300201&quot;,     &quot;marry&quot;:&quot;300301&quot;,     &quot;motherPremaritalName&quot;:&quot;mompreName&quot;,     &quot;familyMemberCount&quot;:&quot;300806&quot;,     &quot;childrenNumber&quot;:&quot;300406&quot;,     &quot;province&quot;:&quot;province&quot;,     &quot;city&quot;:&quot;city&quot;,     &quot;county&quot;:&quot;county&quot;,     &quot;postalCode&quot;:&quot;100102&quot;,     &quot;address&quot;:&quot;DSJAHDJSAHFJ 13DH 21838-HDH(DJSHD)&quot;,     &quot;gpsProvince&quot;:&quot;gpsProvince&quot;,     &quot;gpsCity&quot;:&quot;gpsCity&quot;,     &quot;gpsCounty&quot;:&quot;gpsCounty&quot;,     &quot;gpsAddress&quot;:&quot;gpsAddress&quot;,     &quot;longitude&quot;:&quot;115.2&quot;,     &quot;latitude&quot;:&quot;8.7&quot;,     &quot;wages&quot;:&quot;300602&quot;,     &quot;workLives&quot;:&quot;300706&quot;,     &quot;job&quot;:&quot;300501&quot;,     &quot;companyName&quot;:&quot;companyName&quot;,     &quot;companyPhone&quot;:&quot;companyPhone&quot;,     &quot;companyProvince&quot;:&quot;companyProvince&quot;,     &quot;companyCity&quot;:&quot;&quot;,     &quot;companyCounty&quot;:&quot;companyCounty&quot;,     &quot;companyAddress&quot;:&quot;companyJSAHF21838 SJDH&quot; }</stringProp>
            <stringProp name="Argument.desc">基本信息{     &quot;birthday&quot;:&quot;1966-02-26&quot;,     &quot;education&quot;:&quot;300101&quot;,     &quot;religion&quot;:&quot;300201&quot;,     &quot;marry&quot;:&quot;300301&quot;,     &quot;motherPremaritalName&quot;:&quot;mompreName&quot;,     &quot;familyMemberCount&quot;:&quot;300806&quot;,     &quot;childrenNumber&quot;:&quot;300406&quot;,     &quot;province&quot;:&quot;province&quot;,     &quot;city&quot;:&quot;city&quot;,     &quot;county&quot;:&quot;county&quot;,     &quot;postalCode&quot;:&quot;100102&quot;,     &quot;address&quot;:&quot;DSJAHDJSAHFJ 13DH 21838-HDH(DJSHD)&quot;,     &quot;gpsProvince&quot;:&quot;gpsProvince&quot;,     &quot;gpsCity&quot;:&quot;gpsCity&quot;,     &quot;gpsCounty&quot;:&quot;gpsCounty&quot;,     &quot;gpsAddress&quot;:&quot;gpsAddress&quot;,     &quot;longitude&quot;:&quot;115.2&quot;,     &quot;latitude&quot;:&quot;8.7&quot;,     &quot;wages&quot;:&quot;300602&quot;,     &quot;workLives&quot;:&quot;300706&quot;,     &quot;job&quot;:&quot;300501&quot;,     &quot;companyName&quot;:&quot;companyName&quot;,     &quot;companyPhone&quot;:&quot;companyPhone&quot;,     &quot;companyProvince&quot;:&quot;companyProvince&quot;,     &quot;companyCity&quot;:&quot;companyCity&quot;,     &quot;companyCounty&quot;:&quot;companyCounty&quot;,     &quot;companyAddress&quot;:&quot;companyJSAHF21838 SJDH&quot; }</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="taxCardNo" elementType="Argument">
            <stringProp name="Argument.name">taxCardNo</stringProp>
            <stringProp name="Argument.value">${__RandomString(12,0123456789,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">税卡</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC--appserver" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">appserver</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://127.0.0.1:3310/appserver_h5</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC--bizserver" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">bizserver</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://127.0.0.1:3310/bizserver</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC--riskserver" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">riskserver</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://127.0.0.1:3310/riskserver</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC--Postgres" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">product</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://127.0.0.1:54322/cashloan_sit</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">panda2018</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">panda</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="印尼--登录新改版" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1559819753000</longProp>
        <longProp name="ThreadGroup.end_time">1559819753000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">String str=&quot;${mobile}&quot;;
String str2=str.substring(str.length()-1,str.length());
vars.put(&quot;data&quot;,str2);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${data}" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C003 获取图形验证码" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="packageName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${packageName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">packageName</stringProp>
              </elementProp>
              <elementProp name="channelKey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${channelKey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channelKey</stringProp>
              </elementProp>
              <elementProp name="version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">version</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${platform}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
              <elementProp name="deviceToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${deviceToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deviceToken</stringProp>
              </elementProp>
              <elementProp name="appName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${appName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">appName</stringProp>
              </elementProp>
              <elementProp name="mobile" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mobile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mobile</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${http}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/appserver/api/query/captcha</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--id" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;id:${id}&quot;);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="799375">成功</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="E003 登录(图形验证码)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="packageName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${packageName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">packageName</stringProp>
              </elementProp>
              <elementProp name="channelKey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${channelKey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channelKey</stringProp>
              </elementProp>
              <elementProp name="version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">version</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${platform}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
              <elementProp name="deviceToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${deviceToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deviceToken</stringProp>
              </elementProp>
              <elementProp name="mobile" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mobile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mobile</stringProp>
              </elementProp>
              <elementProp name="countryCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">62</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">countryCode</stringProp>
              </elementProp>
              <elementProp name="digits" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">100${data}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digits</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${http}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/appserver/api/user/login_by_captcha</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--uid" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">uid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">data.uid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;uid:${uid}&quot;);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="799375">成功</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="上传&amp;获取图片--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="身份证idCard0、1" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传图片--idcard" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\haihong\Desktop\pic\e-KTP-KU.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\haihong\Desktop\pic\e-KTP-KU.jpg</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="extra_param" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${extra_param}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">extra_param</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${packageName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="channelKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${channelKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channelKey</stringProp>
                  </elementProp>
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="platform" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${platform}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">platform</stringProp>
                  </elementProp>
                  <elementProp name="deviceToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceToken</stringProp>
                  </elementProp>
                  <elementProp name="deviceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/appserver/api/file/upload_image</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">数据写入e_user_detail</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\getPicUrl_idCard.txt</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">type,extra_param</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Disposition</stringProp>
                    <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1147832196">${uid}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="活体照片" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传图片--liveness" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\haihong\Desktop\pic\timg.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\haihong\Desktop\pic\timg.jpg</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="extra_param" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${extra_param}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">extra_param</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${packageName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="channelKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${channelKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channelKey</stringProp>
                  </elementProp>
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="platform" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${platform}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">platform</stringProp>
                  </elementProp>
                  <elementProp name="deviceToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceToken</stringProp>
                  </elementProp>
                  <elementProp name="deviceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/appserver/api/file/upload_image</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">数据写入e_user_detail</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\getPicUrl_liveness.txt</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">type,extra_param</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Disposition</stringProp>
                    <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1147832196">${uid}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="签名--signature" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传图片--signature" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\haihong\Desktop\pic\22.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\haihong\Desktop\pic\22.jpg</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="extra_param" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${extra_param}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">extra_param</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${packageName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="channelKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${channelKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channelKey</stringProp>
                  </elementProp>
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="platform" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${platform}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">platform</stringProp>
                  </elementProp>
                  <elementProp name="deviceToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceToken</stringProp>
                  </elementProp>
                  <elementProp name="deviceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/appserver/api/file/upload_image</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">数据写入e_user_detail</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\getPicUrl_signature.txt</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">type,extra_param</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Disposition</stringProp>
                    <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1147832196">${uid}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="其他图片--extMsg" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传图片--extMsg" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\haihong\Desktop\pic\身份证背面.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\haihong\Desktop\pic\身份证背面.jpg</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="extra_param" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${extra_param}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">extra_param</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${packageName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="channelKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${channelKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channelKey</stringProp>
                  </elementProp>
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="platform" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${platform}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">platform</stringProp>
                  </elementProp>
                  <elementProp name="deviceToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceToken</stringProp>
                  </elementProp>
                  <elementProp name="deviceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/appserver/api/file/upload_image</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">数据写入e_user_detail</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\getPicUrl_extMsg.txt</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">type,extra_param</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Disposition</stringProp>
                    <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1147832196">${uid}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B003 身份证图片 活体图片 匹配认证" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/user/image_verification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">身份证图片idcard和活体图片liveness要一致      人脸识别上传非人脸  商汤识别失败仍可提交授信</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="获取图片地址" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">4</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取图片地址" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="${picPath}\11.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">${picPath}\11.jpg</stringProp>
                    <stringProp name="File.paramname">image</stringProp>
                    <stringProp name="File.mimetype">image/jpeg</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${packageName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="channelKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${channelKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">channelKey</stringProp>
                  </elementProp>
                  <elementProp name="uid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${uid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">uid</stringProp>
                  </elementProp>
                  <elementProp name="version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">version</stringProp>
                  </elementProp>
                  <elementProp name="platform" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${platform}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">platform</stringProp>
                  </elementProp>
                  <elementProp name="deviceToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceToken</stringProp>
                  </elementProp>
                  <elementProp name="deviceId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${deviceId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">deviceId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/appserver/api/query/image_url</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\getPicUrl.txt</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">type</stringProp>
              </CSVDataSet>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Disposition</stringProp>
                    <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="116079">url</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取身份证号码与真实姓名比对结果" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/user/get_verify_result</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="B012 实名认证提交" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="packageName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${packageName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">packageName</stringProp>
              </elementProp>
              <elementProp name="channelKey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${channelKey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">channelKey</stringProp>
              </elementProp>
              <elementProp name="version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">version</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${platform}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
              <elementProp name="deviceToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${deviceToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deviceToken</stringProp>
              </elementProp>
              <elementProp name="deviceId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${deviceId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deviceId</stringProp>
              </elementProp>
              <elementProp name="uid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${uid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">uid</stringProp>
              </elementProp>
              <elementProp name="idCardNo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${idCardNo}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">idCardNo</stringProp>
              </elementProp>
              <elementProp name="idCardName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${idCardName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">idCardName</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${http}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/appserver/api/user/verifyCardAndImage</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="799375">成功</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="B004 提交通讯录认证信息--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="通讯录认证" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="contacts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{     &quot;contacts&quot;:[         {             &quot;contactId&quot;:&quot;5&quot;,             &quot;displayName&quot;:&quot;飞飞&quot;,             &quot;firstName&quot;:&quot;飞飞&quot;,             &quot;mobile&quot;:&quot;+6281254634981&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298431&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;38&quot;,             &quot;displayName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;firstName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298430&quot;,             &quot;mobile&quot;:&quot;013939665068&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;42&quot;,             &quot;displayName&quot;:&quot;北京社保&quot;,             &quot;firstName&quot;:&quot;北京&quot;,             &quot;lastName&quot;:&quot;社保&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298433&quot;,             &quot;mobile&quot;:&quot; 01012333&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;55&quot;,             &quot;displayName&quot;:&quot;263企业会议&quot;,             &quot;lastName&quot;:&quot;263企业会议&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298448&quot;,             &quot;mobile&quot;:&quot;01056 161166&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;75&quot;,             &quot;displayName&quot;:&quot;新能源客服&quot;,             &quot;firstName&quot;:&quot;新能源客服&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;81562552&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;76&quot;,             &quot;displayName&quot;:&quot;test1&quot;,             &quot;firstName&quot;:&quot;test1&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+6281562555&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         } 		,{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;5&quot;,             &quot;displayName&quot;:&quot;飞飞&quot;,             &quot;firstName&quot;:&quot;飞飞&quot;,             &quot;mobile&quot;:&quot;+6281254634981&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298431&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;38&quot;,             &quot;displayName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;firstName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298430&quot;,             &quot;mobile&quot;:&quot;013939665068&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;42&quot;,             &quot;displayName&quot;:&quot;北京社保&quot;,             &quot;firstName&quot;:&quot;北京&quot;,             &quot;lastName&quot;:&quot;社保&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298433&quot;,             &quot;mobile&quot;:&quot; 01012333&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;55&quot;,             &quot;displayName&quot;:&quot;263企业会议&quot;,             &quot;lastName&quot;:&quot;263企业会议&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298448&quot;,             &quot;mobile&quot;:&quot;01056 161166&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;75&quot;,             &quot;displayName&quot;:&quot;新能源客服&quot;,             &quot;firstName&quot;:&quot;新能源客服&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;81562552&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;76&quot;,             &quot;displayName&quot;:&quot;test1&quot;,             &quot;firstName&quot;:&quot;test1&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+6281562555&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         } 		,{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;5&quot;,             &quot;displayName&quot;:&quot;飞飞&quot;,             &quot;firstName&quot;:&quot;飞飞&quot;,             &quot;mobile&quot;:&quot;+6281254634981&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298431&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;38&quot;,             &quot;displayName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;firstName&quot;:&quot;杨丽妃-驻马店中医院&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298430&quot;,             &quot;mobile&quot;:&quot;013939665068&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;42&quot;,             &quot;displayName&quot;:&quot;北京社保&quot;,             &quot;firstName&quot;:&quot;北京&quot;,             &quot;lastName&quot;:&quot;社保&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298433&quot;,             &quot;mobile&quot;:&quot; 01012333&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;55&quot;,             &quot;displayName&quot;:&quot;263企业会议&quot;,             &quot;lastName&quot;:&quot;263企业会议&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298448&quot;,             &quot;mobile&quot;:&quot;01056 161166&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },         {             &quot;contactId&quot;:&quot;75&quot;,             &quot;displayName&quot;:&quot;新能源客服&quot;,             &quot;firstName&quot;:&quot;新能源客服&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;81562552&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;76&quot;,             &quot;displayName&quot;:&quot;test1&quot;,             &quot;firstName&quot;:&quot;test1&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+6281562555&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         } 		,{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         },{             &quot;contactId&quot;:&quot;${__RandomString(2,123456789,)}&quot;,             &quot;displayName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;firstName&quot;:&quot;rosa_${__RandomString(4,qazwsxedcrfvtgbyhnujmiklop,)}&quot;,             &quot;lastUpdatedTimestamp&quot;:&quot;1542408298456 &quot;,             &quot;mobile&quot;:&quot;+62${__RandomString(11,123456789,)}&quot;,             &quot;org&quot;:&quot; &quot;,             &quot;title&quot;:&quot;&quot;         }     ] }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contacts</stringProp>
                </elementProp>
                <elementProp name="emerContacts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${emerContacts}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">emerContacts</stringProp>
                </elementProp>
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="appName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Mudah Uang</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">appName</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/user/contacts_auth</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="false">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="B006 提交客户信息--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="客户基本信息提交" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="personInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personInfo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">personInfo</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/user/customer_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="B007 客户附加信息--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交客户附加信息" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="taxCardNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${taxCardNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">taxCardNo</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/user/customer_extra_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="银行卡相关--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="绑卡前--A003 获取绑定银行卡状态和银行卡信息" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/query/bank_card_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加银行卡   银行卡号与code要匹配" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cardNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${cardNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cardNo</stringProp>
                </elementProp>
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${code_bank}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/add_bank_card</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">e_bankcard</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\yinniData\uploadPic.txt</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">type,extra_param</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Disposition</stringProp>
                  <stringProp name="Header.value">form-data; name=&quot;imgType&quot;</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="绑卡后--A003 获取绑定银行卡状态和银行卡信息" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/query/bank_card_info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="799375">成功</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="提交授信--ok" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
          <stringProp name="TestPlan.comments">全部认证项提交   未认证、已认证、认证成功、认证失败</stringProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交授信" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="blackbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__RandomString(10,0123456789qazwsx)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">blackbox</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/order/add_credit</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取授信applyCode" enabled="false">
          <stringProp name="dataSource">appserver</stringProp>
          <stringProp name="query">select  platformid from e_credit where uid=&apos;${uid}&apos; and status=&apos;10&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取applyCode" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">applyCode</stringProp>
            <stringProp name="RegexExtractor.regex">platformid\s(.*?)\s</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;applyCode:${applyCode}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="登录riskui" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="risk登录" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${risk_user}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${risk_pwd}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/riskui/sys/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--mobile" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">mobile</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.mobile</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">log.info(&quot;token:${token}&quot;);
//${__setProperty(token,${token},)};
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="证审--ok" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="证审--审核成功" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="idCard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">idCard</stringProp>
                </elementProp>
                <elementProp name="loanCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loanCount</stringProp>
                </elementProp>
                <elementProp name="materialCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">materialCount</stringProp>
                </elementProp>
                <elementProp name="userImg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userImg</stringProp>
                </elementProp>
                <elementProp name="userLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userLocation</stringProp>
                </elementProp>
                <elementProp name="companyGoogle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">companyGoogle</stringProp>
                </elementProp>
                <elementProp name="userCompanyAddrCompareGoo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userCompanyAddrCompareGoo</stringProp>
                </elementProp>
                <elementProp name="userCompanyMobileCompareGoo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userCompanyMobileCompareGoo</stringProp>
                </elementProp>
                <elementProp name="workPeriod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">workPeriod</stringProp>
                </elementProp>
                <elementProp name="loanHistory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loanHistory</stringProp>
                </elementProp>
                <elementProp name="evidenceContent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">success</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">evidenceContent</stringProp>
                </elementProp>
                <elementProp name="applyCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applyCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applyCode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/riskui/risk/apply/artificial1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="false">
              <stringProp name="ConstantTimer.delay">70000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="证审--审核失败" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="idCard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">idCard</stringProp>
                </elementProp>
                <elementProp name="loanCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loanCount</stringProp>
                </elementProp>
                <elementProp name="materialCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">materialCount</stringProp>
                </elementProp>
                <elementProp name="userImg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userImg</stringProp>
                </elementProp>
                <elementProp name="userLocation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userLocation</stringProp>
                </elementProp>
                <elementProp name="companyGoogle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">companyGoogle</stringProp>
                </elementProp>
                <elementProp name="userCompanyAddrCompareGoo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userCompanyAddrCompareGoo</stringProp>
                </elementProp>
                <elementProp name="userCompanyMobileCompareGoo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userCompanyMobileCompareGoo</stringProp>
                </elementProp>
                <elementProp name="workPeriod" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">workPeriod</stringProp>
                </elementProp>
                <elementProp name="loanHistory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loanHistory</stringProp>
                </elementProp>
                <elementProp name="evidenceContent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">fail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">evidenceContent</stringProp>
                </elementProp>
                <elementProp name="applyCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applyCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applyCode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/riskui/risk/apply/artificial1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="电核--ok" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
          <stringProp name="TestPlan.comments">电核审核通过后  e_credit表状态10变成11 审核通过   12审核拒绝</stringProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="电核--审核成功" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="birthdayCompareFacebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthdayCompareFacebook</stringProp>
                </elementProp>
                <elementProp name="bornAddressCompareKtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">bornAddressCompareKtp</stringProp>
                </elementProp>
                <elementProp name="workOrHomeAddressCompare" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">workOrHomeAddressCompare</stringProp>
                </elementProp>
                <elementProp name="addressCompareFacebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressCompareFacebook</stringProp>
                </elementProp>
                <elementProp name="otherMobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">otherMobile</stringProp>
                </elementProp>
                <elementProp name="facebookFriendCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facebookFriendCount</stringProp>
                </elementProp>
                <elementProp name="currLocationCompare" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">currLocationCompare</stringProp>
                </elementProp>
                <elementProp name="insPublishCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">insPublishCount</stringProp>
                </elementProp>
                <elementProp name="birthdayCompareGoogle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthdayCompareGoogle</stringProp>
                </elementProp>
                <elementProp name="facebookAccountCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facebookAccountCount</stringProp>
                </elementProp>
                <elementProp name="ktpLastNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ktpLastNumber</stringProp>
                </elementProp>
                <elementProp name="callUserConfirmInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callUserConfirmInfo</stringProp>
                </elementProp>
                <elementProp name="callCompanyConfirmInf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callCompanyConfirmInf</stringProp>
                </elementProp>
                <elementProp name="callLinkmanConfirmInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callLinkmanConfirmInfo</stringProp>
                </elementProp>
                <elementProp name="professionIsBanLoan" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">professionIsBanLoan</stringProp>
                </elementProp>
                <elementProp name="applyCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applyCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applyCode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/riskui/risk/apply/artificial2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">token</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="电核--审核失败" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="birthdayCompareFacebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthdayCompareFacebook</stringProp>
                </elementProp>
                <elementProp name="bornAddressCompareKtp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">bornAddressCompareKtp</stringProp>
                </elementProp>
                <elementProp name="workOrHomeAddressCompare" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">workOrHomeAddressCompare</stringProp>
                </elementProp>
                <elementProp name="addressCompareFacebook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">addressCompareFacebook</stringProp>
                </elementProp>
                <elementProp name="otherMobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">otherMobile</stringProp>
                </elementProp>
                <elementProp name="facebookFriendCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facebookFriendCount</stringProp>
                </elementProp>
                <elementProp name="currLocationCompare" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">currLocationCompare</stringProp>
                </elementProp>
                <elementProp name="insPublishCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">insPublishCount</stringProp>
                </elementProp>
                <elementProp name="birthdayCompareGoogle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">birthdayCompareGoogle</stringProp>
                </elementProp>
                <elementProp name="facebookAccountCount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facebookAccountCount</stringProp>
                </elementProp>
                <elementProp name="ktpLastNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ktpLastNumber</stringProp>
                </elementProp>
                <elementProp name="callUserConfirmInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callUserConfirmInfo</stringProp>
                </elementProp>
                <elementProp name="callCompanyConfirmInf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callCompanyConfirmInf</stringProp>
                </elementProp>
                <elementProp name="callLinkmanConfirmInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">callLinkmanConfirmInfo</stringProp>
                </elementProp>
                <elementProp name="professionIsBanLoan" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">professionIsBanLoan</stringProp>
                </elementProp>
                <elementProp name="applyCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${applyCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">applyCode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/riskui/risk/apply/artificial2</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="借款" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="授信结果--显示授信额度" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/order/credit_result</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取服务费率serviceFee" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">serviceFee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.riskFeeRate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="管理费managementFee" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">managementFee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.insuranceServiceFeeRate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取日利率dayRate" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dayRate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.interestFeeRate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取借款期数 period" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">period</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.period</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取借款额度 borrow_money" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">borrow_money</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.creditMoney</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取授信状态creditStatus" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">creditStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.creditStatus</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="false">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;dayRate:${dayRate}&quot;);
log.info(&quot;managementFee:${managementFee}&quot;);
log.info(&quot;serviceFee:${serviceFee}&quot;);
log.info(&quot;借款金额：${borrow_money}&quot;);
log.info(&quot;期数：${period}&quot;);
log.info(&quot;授信状态：${creditStatus}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--判断授信状态" enabled="true">
              <stringProp name="BeanShellAssertion.query">int actualStatus=${creditStatus};
int  finishStatus=1;
if(actualStatus==finishStatus){
	Failure=false;
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--判断授信额度" enabled="false">
              <stringProp name="BeanShellAssertion.query"></stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--计算实际到账金额" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.zhtx.jmeter.DoubleArith;
double bm=${borrow_money};
double dr=${dayRate};
double mf=${managementFee};
double sf=${serviceFee};
double day=${period};
double  money=bm-bm*(dr+mf+sf)*day;
System.out.println(money);
double two=DoubleArith.round(money,1);
int  i=(int)two;
//double e=800000-800000*(0.01+0.02+0.008)*7;

vars.put(&quot;actualAmount&quot;,i.toString());</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${actualAmount}" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="借款" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="packageName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${packageName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">packageName</stringProp>
                </elementProp>
                <elementProp name="channelKey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${channelKey}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">channelKey</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${platform}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
                <elementProp name="deviceToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceToken</stringProp>
                </elementProp>
                <elementProp name="blackbox" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__RandomString(10,0123456789qazwsx)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">blackbox</stringProp>
                </elementProp>
                <elementProp name="money" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${borrow_money}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">money</stringProp>
                </elementProp>
                <elementProp name="actualAmount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${actualAmount}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">actualAmount</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
                <elementProp name="intentMoney" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__RandomString(3,0123456789)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">intentMoney</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/order/add_order</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int a=${borrow_money};
int b=${dayRate};
int c=${managementFee};
int d=${serviceFee};
int e=a-a*(b+c+d);
vars.put(&quot;actualAmount&quot;,e.toString());
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="biz--提现审核---审核通过，放款" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取apply_id" enabled="true">
              <stringProp name="dataSource">appserver</stringProp>
              <stringProp name="query">select  platformid from e_order where uid=&apos;${uid}&apos; and status=&apos;13&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取order_apply_id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">order_apply_id</stringProp>
                <stringProp name="RegexExtractor.regex">platformid\s(.*?)\s</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;applyCode:${order_apply_id}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="人工放款--通过" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="applyCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${order_apply_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">applyCode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/riskui/risk/apply/confirmLoanPass</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">放款--生成放款计划</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
                <stringProp name="ConstantTimer.delay">70000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="人工放款--不通过" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="applyCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${order_apply_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">applyCode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/riskui/risk/apply/confirmLoanRefuse</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">放款--生成放款计划</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="人工放款--银行卡打回" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="applyCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1552645598000000001</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">applyCode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${http}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/riskui/risk/apply/confirmLoanBankRefuse</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">放款--生成放款计划</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="还款" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="orderid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${orderNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">orderid</stringProp>
                </elementProp>
                <elementProp name="repaymoney" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${borrow_money}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">repaymoney</stringProp>
                </elementProp>
                <elementProp name="payType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">atm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">payType</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">permata</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">bankType</stringProp>
                </elementProp>
                <elementProp name="uid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${uid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">uid</stringProp>
                </elementProp>
                <elementProp name="deviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${deviceId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">deviceId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/appserver/api/trade/repayment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">出参生成VIN码</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="支付回调--nouse" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;channelBizCode&quot;:&quot;loan_fintech_bluepay&quot;,&quot;channelCode&quot;:&quot;bluepay&quot;,&quot;originChannelCallBack&quot;:{&quot;t_id&quot;:&quot;7af5191b2f0149da8e2351eb693d756a&quot;,&quot;bt_id&quot;:&quot;2257042141551784475234CgHkBM&quot;,&quot;interfacetype&quot;:&quot;cashout&quot;,&quot;productid&quot;:&quot;2257&quot;,&quot;encrypt&quot;:&quot;e663b3d5d912913e3f5cf41ae9d9689b&quot;,&quot;price&quot;:&quot;66320&quot;,&quot;currency&quot;:&quot;IDR&quot;,&quot;cmd&quot;:&quot;CFM&quot;,&quot;msisdn&quot;:&quot;62082197662283&quot;,&quot;paytype&quot;:&quot;pre&quot;,&quot;operator&quot;:&quot;PERMATA&quot;,&quot;status&quot;:&quot;200&quot;},&quot;outTradeNo&quot;:&quot;d5b077c03a834ae8b871494dd6a085d6&quot;,&quot;passBack&quot;:{&quot;payOrderId&quot;:&quot;1551784474910000001&quot;},&quot;tradeMsg&quot;:&quot;交易成功&quot;,&quot;tradeStatus&quot;:&quot;success&quot;,&quot;transactionCode&quot;:&quot;7af5191b2f0149da8e2351eb693d756a&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/bizserver/payment/notify/bluepay/payNotify</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="还款--bizServer  --一般不用" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;loanAmount&quot;:&quot;80000&quot;,&#xd;
   &quot;applyCode&quot;:&quot;1551698242000000001&quot; ,&#xd;
   &quot;periodNum&quot;:&quot;1&quot;,&#xd;
   &quot;repayTime&quot;:&quot;2019-3-5 21:37:40&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${http}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/bizserver/app/preRepay</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">2052632</stringProp>
      </ResultCollector>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="产品配置中心--变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="apply_amount" elementType="Argument">
            <stringProp name="Argument.name">apply_amount</stringProp>
            <stringProp name="Argument.value">1500000</stringProp>
            <stringProp name="Argument.desc">2${__RandomString(6,1234567890,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sub_product_code" elementType="Argument">
            <stringProp name="Argument.name">sub_product_code</stringProp>
            <stringProp name="Argument.value">skypay2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="product_code" elementType="Argument">
            <stringProp name="Argument.name">product_code</stringProp>
            <stringProp name="Argument.value">SKYPAY</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组--产品配置中心" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1560766139000</longProp>
        <longProp name="ThreadGroup.end_time">1560766139000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config--sub_product_code" enabled="false">
            <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\panda\productConfig\subproductcode.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">sub_product_code</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config--payAndAmountType" enabled="false">
            <stringProp name="filename">C:\Users\haihong\work\apache-jmeter-3.1\datas\panda\productConfig\payAndAmountType.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">contract_type,fee_type</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="修改子产品的合同金额类型和手续费付款方式" enabled="false">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">update product.sub_products set contract_amount_type=&apos;${contract_type}&apos;,fee_payment_type=&apos;${fee_type}&apos; where product_code=&apos;${product_code}&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询子产品的合同金额类型和手续费付款方式" enabled="false">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select contract_amount_type,fee_payment_type from product.sub_products where product_code=&apos;${product_code}&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询子产品" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/product/v1/sub-products/${sub_product_code}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取手续费付款方式fee_payment_type" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">fee_payment_type</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.sub_product.fee_payment_type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取合同金额类型contract_amount_type" enabled="true">
              <stringProp name="TestPlan.comments">实际到账金额取整</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">contract_amount_type</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.sub_product.contract_amount_type</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取借款期限loan_period" enabled="true">
              <stringProp name="TestPlan.comments">到期应还</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">loan_period</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.sub_product.loan_period</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取利息率interest_rate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">interest_rate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;interest_rate&quot;:(.*?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取利息率interest_rate" enabled="false">
              <stringProp name="TestPlan.comments">借款日期</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">interest_rate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.sub_product.interest_rate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取服务费率service_fee" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">service_fee</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.sub_product.service_fee</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;fee_payment_type:${fee_payment_type}&quot;);
log.info(&quot;contract_amount_type:${contract_amount_type}&quot;);
log.info(&quot;loan_period:${loan_period}&quot;);
log.info(&quot;interest_rate:${interest_rate}&quot;);
log.info(&quot;service_fee:${service_fee}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--BigDecimal  --参数化" enabled="false">
            <stringProp name="TestPlan.comments">加法 add()函数     减法subtract()函数
乘法multiply()函数    除法divide()函数    绝对值abs()函数
如果到期最后三位大于500，取500   小于500 为000思路去计算</stringProp>
            <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
BigDecimal apply_money=new BigDecimal(&quot;${apply_amount}&quot;); //申请金额
BigDecimal qi_xian=new BigDecimal(&quot;${loan_period}&quot;); //期限 loan_period
BigDecimal overdue_days=new BigDecimal(&quot;1&quot;);//逾期天数
BigDecimal day_rate=new BigDecimal(&quot;${interest_rate}&quot;); //日利率interest_rate
BigDecimal day_fee=new BigDecimal(&quot;${service_fee}&quot;);  //日服务费service_fee
BigDecimal day_penalty=new BigDecimal(&quot;0.03&quot;);  //日罚息
BigDecimal  num=new BigDecimal(&quot;1&quot;); //基数
String contract_amount_type=&quot;${contract_amount_type}&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;${fee_payment_type}&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
BigDecimal  result1=day_rate.multiply(qi_xian);  //日利率*借款期限
BigDecimal  result2=day_fee.multiply(qi_xian); //日服务费率*借款期限
BigDecimal result3=day_penalty.multiply(overdue_days);//日罚息率*逾期天数
//合同金额类型为申请金额  fee_payment_type
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额=申请金额 利息：合同金额*日利息费率*借款期限  服务费：合同金额*日服务费率*借款期限
	BigDecimal interest=result1.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP);  //合同等同申请，利息	
	BigDecimal service_charge=result2.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，服务费
	BigDecimal overdue_fee=result3.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，逾期费用

	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额		
		BigDecimal arrival_amount=apply_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额		
		String  str_arrival_amount=arrival_amount.toString();  //转string类型
		String  substrBefore_arrival_amount=str_arrival_amount.substring(0,str_arrival_amount.length()-3);//从0开始截取倒数第三位
		String substrAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());//截取后三位
		int  int_arrival_amount=Integer.parseInt(substrAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
		
		BigDecimal repay_amount=apply_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		String str_repay_amount=repay_amount.toString();
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额
		
		BigDecimal arrival_amount=apply_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		String  str_arrival_amount=arrival_amount.toString();  //转string类型
		String  substrBefore_arrival_amount=str_arrival_amount.substring(0,str_arrival_amount.length()-3);//从0开始截取倒数第三位
		String substrAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());//截取后三位
		int   int_arrival_amount=Integer.parseInt(substrAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
		
		BigDecimal repay_amount=apply_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		String str_repay_amount=repay_amount.toString();
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		System.out.println(str_overdue_repay+&quot; &quot;+strBefore_overdue_repay+&quot; &quot;+int_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额
		
		BigDecimal result4=apply_money.subtract(service_charge);
		BigDecimal arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		String  str_arrival_amount=arrival_amount.toString();  //转string类型
		String  substrBefore_arrival_amount=str_arrival_amount.substring(0,str_arrival_amount.length()-3);//从0开始截取倒数第三位
		String substrAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());//截取后三位
		int   int_arrival_amount=Integer.parseInt(substrAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=substrBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额
			}
			
		BigDecimal repay_amount=apply_money; //到期应还
		String str_repay_amount=repay_amount.toString();
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}		
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额类型为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{ 
		BigDecimal  result5=num.subtract(result2).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额  取整		
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		String str_contract_money=contract_money.toString();
		String strBefore_contract_money=str_contract_money.substring(0,str_contract_money.length()-3);
		String strAfter_contract_money=str_contract_money.substring(str_contract_money.length()-3,str_contract_money.length());
		int int_contract_money=Integer.parseInt(strAfter_contract_money);
		if(int_contract_money&gt;=500){
			String round_value=&quot;500&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}
	
		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money2.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		String str_arrival_amount=arrival_amount.toString();
		String strBefore_arrival_amount=str_arrival_amount.substring(0,str_arrival_amount.length()-3);
		String strAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());
		int int_arrival_amount=Integer.parseInt(strAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=strBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=strBefore_arrival_amount+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
			
		BigDecimal repay_amount=contract_money2.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		String str_repay_amount=repay_amount.toString();
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  result5=num.subtract(result1).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额 取整
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		String str_contract_money=contract_money.toString();
		String strBefore_contract_money=str_contract_money.substring(0,str_contract_money.length()-3);
		String strAfter_contract_money=str_contract_money.substring(str_contract_money.length()-3,str_contract_money.length());
		int int_contract_money=Integer.parseInt(strAfter_contract_money);
		if(int_contract_money&gt;=500){
			String round_value=&quot;500&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}

		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money2.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		String str_arrival_amount=arrival_amount.toString();
		String strBefore_contract_money=str_arrival_amount.substring(0,str_arrival_amount.length()-3);
		String strAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());
		int int_arrival_amount=Integer.parseInt(strAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
		
		BigDecimal repay_amount=contract_money2.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		String str_repay_amount=repay_amount.toString();
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strAfter_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{	
	             BigDecimal result01=day_rate.add(day_fee);
	             BigDecimal result02=result01.multiply(qi_xian);
	            
		BigDecimal  result5=num.subtract(result02).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额  取整
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		String str_contract_money=contract_money.toString();
		System.out.println(str_contract_money);
		String strBefore_contract_money=str_contract_money.substring(0,str_contract_money.length()-3);
		String strAfter_contract_money=str_contract_money.substring(str_contract_money.length()-3,str_contract_money.length());
		int int_contract_money=Integer.parseInt(strAfter_contract_money);
		if(int_contract_money&gt;=500){
			String round_value=&quot;500&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String contract_money_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_contract_amount&quot;,contract_money_round); //合同金额，向下取整
			}

		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
	            
	             
		BigDecimal result4=contract_money2.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		String str_arrival_amount=arrival_amount.toString();
		String strBefore_contract_money=str_arrival_amount.substring(0,str_arrival_amount.length()-3);
		String strAfter_arrival_amount=str_arrival_amount.substring(str_arrival_amount.length()-3,str_arrival_amount.length());
		int int_arrival_amount=Integer.parseInt(strAfter_arrival_amount);
		if(int_arrival_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String arrival_amount_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
		else{
			String round_value=&quot;000&quot;;
			String arrival_amount_round=strBefore_contract_money+round_value;
			vars.put(&quot;expect_arrival_amount&quot;,arrival_amount_round); //到账金额，向下取整
			}
		
		BigDecimal repay_amount=contract_money; //到期应还
		String str_repay_amount=repay_amount.toString();
		System.out.println(str_repay_amount);
		String strBefore_repay_amount=str_repay_amount.substring(0,str_repay_amount.length()-3);
		System.out.println(strBefore_repay_amount);
		String strAfter_repay_amount=str_repay_amount.substring(str_repay_amount.length()-3,str_repay_amount.length());
		System.out.println(strAfter_repay_amount);
		int int_repay_amount=Integer.parseInt(strAfter_repay_amount);
		System.out.println(int_repay_amount);
		if(int_repay_amount&gt;=500){
			String round_value=&quot;500&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_repay_amount+round_value;
			vars.put(&quot;expect_repay_amount&quot;,repay_amount_round); //到期应还
			}
		BigDecimal overdue_repay=contract_money2.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());		
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);	
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还		
			}
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--BigDecimal  --参数化   --引用方法" enabled="true">
            <stringProp name="TestPlan.comments">加法 add()函数     减法subtract()函数
乘法multiply()函数    除法divide()函数    绝对值abs()函数
如果到期最后三位大于500，取500   小于500 为000思路去计算</stringProp>
            <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
BigDecimal apply_money=new BigDecimal(&quot;${apply_amount}&quot;); //申请金额
BigDecimal qi_xian=new BigDecimal(&quot;${loan_period}&quot;); //期限 loan_period
BigDecimal overdue_days=new BigDecimal(&quot;1&quot;);//逾期天数
BigDecimal day_rate=new BigDecimal(&quot;${interest_rate}&quot;); //日利率interest_rate
BigDecimal day_fee=new BigDecimal(&quot;${service_fee}&quot;);  //日服务费service_fee
BigDecimal day_penalty=new BigDecimal(&quot;0.03&quot;);  //日罚息
BigDecimal  num=new BigDecimal(&quot;1&quot;); //基数
String contract_amount_type=&quot;${contract_amount_type}&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;${fee_payment_type}&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
BigDecimal  result1=day_rate.multiply(qi_xian);  //日利率*借款期限
BigDecimal  result2=day_fee.multiply(qi_xian); //日服务费率*借款期限
BigDecimal result3=day_penalty.multiply(overdue_days);//日罚息率*逾期天数
//公用方法
public class AmountRound {
    public String ValueRound(BigDecimal amount){
        String str_amount_round=amount.toString();
        String strBefore_half=str_amount_round.substring(0,str_amount_round.length()-3);
        String strAfter_half_three=str_amount_round.substring(str_amount_round.length()-3,str_amount_round.length());
        int int_AfterThree=Integer.parseInt(strAfter_half_three);
        if(int_AfterThree&gt;=500){
            String round_value=&quot;500&quot;;
            String amount_round_after=strBefore_half+round_value;
            return amount_round_after;
        }
        else{
            String round_value=&quot;000&quot;;
            String amount_round_after=strBefore_half+round_value;
            return amount_round_after;
        }

    }
}
AmountRound ar=new AmountRound();
//合同金额类型为申请金额  fee_payment_type
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额=申请金额 利息：合同金额*日利息费率*借款期限  服务费：合同金额*日服务费率*借款期限
	BigDecimal interest=result1.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP);  //合同等同申请，利息	
	BigDecimal service_charge=result2.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，服务费
	BigDecimal overdue_fee=result3.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，逾期费用

	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额		
		BigDecimal arrival_amount=apply_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额	
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount)); //到账金额，向下取整	
		
		BigDecimal repay_amount=apply_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount)); //到期应还
	
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期总应还
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额
		
		BigDecimal arrival_amount=apply_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount)); //到账金额，向下取整
		
		BigDecimal repay_amount=apply_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount)); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期总应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		vars.put(&quot;expect_contract_amount&quot;,apply_money.toString());//合同金额
		
		BigDecimal result4=apply_money.subtract(service_charge);
		BigDecimal arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount)); //到账金额，向下取整
		
		BigDecimal repay_amount=apply_money; //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount)); //到期应还
	
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期总应还		
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额类型为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{ 
		BigDecimal  result5=num.subtract(result2).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额  取整		
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整		
		vars.put(&quot;expect_contract_amount&quot;,ar.ValueRound(contract_money)); //合同金额，向下取整
	
		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money2.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额	
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount)); //到账金额，向下取整		
			
		BigDecimal repay_amount=contract_money2.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount)); //到期应还
	
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期总应还
		}
              //WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  result5=num.subtract(result1).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额 取整
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		vars.put(&quot;expect_contract_amount&quot;,ar.ValueRound(contract_money)); //合同金额

		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money2.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount_round)); //到账金额，向下取整
		
		BigDecimal repay_amount=contract_money2.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount_round)); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{	
	             BigDecimal result01=day_rate.add(day_fee);
	             BigDecimal result02=result01.multiply(qi_xian);
	            
		BigDecimal  result5=num.subtract(result02).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额  取整
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		vars.put(&quot;expect_contract_amount&quot;,ar.ValueRound(contract_money));//合同金额，向下取整
		
		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
       
		BigDecimal result4=contract_money2.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		vars.put(&quot;expect_arrival_amount&quot;,ar.ValueRound(arrival_amount)); //到账金额，向下取整

		BigDecimal repay_amount=contract_money; //到期应还
		vars.put(&quot;expect_repay_amount&quot;,ar.ValueRound(repay_amount)); //到期应还
		
		BigDecimal overdue_repay=contract_money2.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		vars.put(&quot;expect_overdue_repay&quot;,ar.ValueRound(overdue_repay)); //逾期应还
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${expect_contract_amount},${expect_arrival_amount},${expect_repay_amount},${expect_overdue_repay}" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="借款试算" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sub_product_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sub_product_code}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sub_product_code</stringProp>
                </elementProp>
                <elementProp name="apply_amount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apply_amount}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apply_amount</stringProp>
                </elementProp>
                <elementProp name="loan_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loan_date</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/product/v1/trial/loan</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取合同金额contract_amount_round" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">contract_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_loan_result.contract_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取实际到账金额actual_arrival_amount_round" enabled="true">
              <stringProp name="TestPlan.comments">实际到账金额取整</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">actual_arrival_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_loan_result.actual_arrival_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取到期应还due_repayment_amount_round" enabled="true">
              <stringProp name="TestPlan.comments">到期应还</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">due_repayment_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_loan_result.due_repayment_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取借款日期loan_date" enabled="true">
              <stringProp name="TestPlan.comments">借款日期</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">loan_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_loan_result.loan_date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取到期还款日repayment_date" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">repayment_date</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_loan_result.repayment_date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;contract_amount_round:${contract_amount_round}&quot;);
log.info(&quot;actual_arrival_amount_round:${actual_arrival_amount_round}&quot;);
log.info(&quot;due_repayment_amount_round:${due_repayment_amount_round}&quot;);
log.info(&quot;loan_date:${loan_date}&quot;);
log.info(&quot;repayment_date:${repayment_date}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--合同金额" enabled="true">
              <stringProp name="BeanShellAssertion.query">if(${expect_contract_amount}!=${contract_amount_round})
	{
		Failure=true;
		FailureMessage=&quot;合同金额计算不正确,实际值：&quot;+${contract_amount_round}+&quot;正确值为：&quot;+&quot;${expect_contract_amount}&quot;;
	}
else{
	FailureMessage=&quot;合同金额计算正确,实际值&quot;+${contract_amount_round};
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--实际到账金额" enabled="true">
              <stringProp name="BeanShellAssertion.query">if(${actual_arrival_amount_round}!=${expect_arrival_amount})
	{
		Failure=true;
		FailureMessage=&quot;实际到账金额计算不正确,实际值：&quot;+${actual_arrival_amount_round}+&quot;正确值为：&quot;+&quot;${expect_arrival_amount}&quot;;
	}
else{
	FailureMessage=&quot;实际到账金额计算正确,实际值&quot;+${actual_arrival_amount_round};
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--到期应还金额" enabled="true">
              <stringProp name="BeanShellAssertion.query">if(${due_repayment_amount_round}!=${expect_repay_amount})
	{
		Failure=true;
		FailureMessage=&quot;到期应还金额计算不正确,实际值：&quot;+${due_repayment_amount_round}+&quot;正确值为：&quot;+&quot;${expect_repay_amount}&quot;;
	}
else{
	FailureMessage=&quot;到期应还金额计算正确,实际值&quot;+${due_repayment_amount_round};
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--到期还款日" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
String repayment_date=&quot;${repayment_date}&quot;;//到期还款日
String loan_date=&quot;${loan_date}&quot;;//借款日期
SimpleDateFormat format=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date d1=format.parse(repayment_date);
Date d2=format.parse(loan_date);
long daysbetween=(d1.getTime()-d2.getTime()+1000000)/(60*60*24*1000)+1;  //（到期还款日-借款日期）+1天=expect借款天数
//vars.put(&quot;daysbetween&quot;,daysbetween.toString());
if(${loan_period}!=daysbetween)
	{
		Failure=true;
		FailureMessage=&quot;到期应还款日计算不正确：&quot;;
	}
else{
	FailureMessage=&quot;到期应还款日计算正确&quot;;
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="还款试算" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sub_product_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sub_product_code}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sub_product_code</stringProp>
                </elementProp>
                <elementProp name="apply_amount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apply_amount}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apply_amount</stringProp>
                </elementProp>
                <elementProp name="loan_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${loan_date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loan_date</stringProp>
                </elementProp>
                <elementProp name="repayment_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-07-17</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">repayment_date</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/product/v1/trial/repayment</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取合同金额contract_amount_round2" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">contract_amount_round2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.contract_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取实际应还金额actual_repayment_amount_round" enabled="true">
              <stringProp name="TestPlan.comments">实际到账金额取整</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">actual_repayment_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.actual_repayment_amount_round</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取滞纳金forfeit_penalty_amount" enabled="true">
              <stringProp name="TestPlan.comments">到期应还</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">forfeit_penalty_amount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.forfeit_penalty_amount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取罚息金额penalty_amount" enabled="true">
              <stringProp name="TestPlan.comments">到期应还</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">penalty_amount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.penalty_amount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取逾期天数overdue_days" enabled="true">
              <stringProp name="TestPlan.comments">到期应还</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">overdue_days</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.overdue_days</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取借款日期loan_date2" enabled="true">
              <stringProp name="TestPlan.comments">借款日期</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">loan_date2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.loan_date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取还款日期repayment_date2" enabled="true">
              <stringProp name="TestPlan.comments">提取合同金额</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">repayment_date2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">data.trial_repayment_result.repayment_date</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;contract_amount_round2:${contract_amount_round2}&quot;);
log.info(&quot;actual_repayment_amount_round:${actual_repayment_amount_round}&quot;);
log.info(&quot;forfeit_penalty_amount:${forfeit_penalty_amount}&quot;);
log.info(&quot;penalty_amount:${penalty_amount}&quot;);
log.info(&quot;overdue_days:${overdue_days}&quot;);
log.info(&quot;loan_date2:${loan_date2}&quot;);
log.info(&quot;repayment_date2:${repayment_date2}&quot;);

import java.math.BigDecimal;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
BigDecimal apply_money=new BigDecimal(&quot;${apply_amount}&quot;); //申请金额
BigDecimal qi_xian=new BigDecimal(&quot;${loan_period}&quot;); //期限 loan_period
BigDecimal overdue_days=new BigDecimal(&quot;${overdue_days}&quot;);//逾期天数
BigDecimal day_rate=new BigDecimal(&quot;${interest_rate}&quot;); //日利率interest_rate
BigDecimal day_fee=new BigDecimal(&quot;${service_fee}&quot;);  //日服务费service_fee
BigDecimal day_penalty=new BigDecimal(&quot;0.03&quot;);  //日罚息
BigDecimal  num=new BigDecimal(&quot;1&quot;); //基数
String contract_amount_type=&quot;${contract_amount_type}&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;${fee_payment_type}&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
BigDecimal  result1=day_rate.multiply(qi_xian);  //日利率*借款期限
BigDecimal  result2=day_fee.multiply(qi_xian); //日服务费率*借款期限
BigDecimal result3=day_penalty.multiply(overdue_days);//日罚息率*逾期天数
//合同金额类型为申请金额  fee_payment_type
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额=申请金额 利息：合同金额*日利息费率*借款期限  服务费：合同金额*日服务费率*借款期限
	BigDecimal interest=result1.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP);  //合同等同申请，利息	
	BigDecimal service_charge=result2.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，服务费
	BigDecimal overdue_fee=result3.multiply(apply_money).setScale(3, BigDecimal.ROUND_HALF_UP); //合同等同申请，逾期费用
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		BigDecimal repay_amount=apply_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal repay_amount=apply_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		System.out.println(str_overdue_repay+&quot; &quot;+strBefore_overdue_repay+&quot; &quot;+int_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{		
		BigDecimal repay_amount=apply_money; //到期应还		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}		
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额类型为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{ 
		System.out.println(&quot;123&quot;);
		BigDecimal  result5=num.subtract(result2).setScale(3,BigDecimal.ROUND_HALF_UP);	
		System.out.println(&quot;1234&quot;);	
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整	
		System.out.println(&quot;1235&quot;);	
		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
		System.out.println(&quot;1236&quot;);
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             System.out.println(&quot;1237&quot;);
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		System.out.println(&quot;1238&quot;);
		BigDecimal repay_amount=contract_money2.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还	
		System.out.println(&quot;1239&quot;);	
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  result5=num.subtract(result1).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整

		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
				
		BigDecimal repay_amount=contract_money2.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strAfter_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还
			}
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{	
	             BigDecimal result01=day_rate.add(day_fee);
	             BigDecimal result02=result01.multiply(qi_xian);
	            
		BigDecimal  result5=num.subtract(result02).setScale(3,BigDecimal.ROUND_HALF_UP);
		
		BigDecimal  contract_money2=apply_money.divide(result5,3,BigDecimal.ROUND_HALF_UP);//合同金额  未取整
		BigDecimal interest=result1.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money2).setScale(3, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
	            	          
		BigDecimal repay_amount=contract_money; //到期应还
		BigDecimal overdue_repay=contract_money2.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		String str_overdue_repay=overdue_repay.toString();
		String strBefore_overdue_repay=str_overdue_repay.substring(0,str_overdue_repay.length()-3);
		String strAfter_overdue_repay=str_overdue_repay.substring(str_overdue_repay.length()-3,str_overdue_repay.length());		
		int int_overdue_repay=Integer.parseInt(strAfter_overdue_repay);	
		if(int_overdue_repay&gt;=500){
			String round_value=&quot;500&quot;;
			String overdue_repay_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,overdue_repay_round); //逾期应还
			}
		else{
			String round_value=&quot;000&quot;;
			String repay_amount_round=strBefore_overdue_repay+round_value;
			vars.put(&quot;expect_overdue_repay&quot;,repay_amount_round); //逾期应还		
			}
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--合同金额" enabled="true">
              <stringProp name="BeanShellAssertion.query">if(${expect_contract_amount}!=${contract_amount_round2})
	{
		Failure=true;
		FailureMessage=&quot;合同金额计算不正确,实际值：&quot;+${contract_amount_round2}+&quot;正确值为：&quot;+&quot;${expect_contract_amount}&quot;;
	}
else{
	FailureMessage=&quot;合同金额计算正确,实际值&quot;+${contract_amount_round2};
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--根据还款日期判断是否逾期，逾期天数是否正确" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.text.SimpleDateFormat;
String repayment_date=&quot;${repayment_date2}&quot;;//实际还款日期
String due_repayment_date=&quot;${repayment_date}&quot;;//到期还款日
SimpleDateFormat format=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date d1=format.parse(repayment_date);
Date d2=format.parse(due_repayment_date);
long daysbetween=(d1.getTime()-d2.getTime()+1000000)/(60*60*24*1000);  //（实际还款日-到期还款日=0；未逾期，大于0逾期）

//vars.put(&quot;daysbetween&quot;,daysbetween.toString());
if(daysbetween!=0&amp;&amp;daysbetween==${overdue_days})
	{
		Failure=true;
		FailureMessage=&quot;已逾期，逾期天数为：&quot;+${overdue_days};		
	}
else{
	FailureMessage=&quot;未逾期&quot;;
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言--实际应还金额" enabled="true">
              <stringProp name="BeanShellAssertion.query">if(${overdue_days}==0)
	{
		//未逾期
		if(${actual_repayment_amount_round}!=${expect_repay_amount})
		{
		Failure=true;
		FailureMessage=&quot;实际应还金额计算不正确,实际值：&quot;+${actual_repayment_amount_round}+&quot;正确值为：&quot;+&quot;${expect_repay_amount}&quot;;
		}
	}
else if(${overdue_days}!=0){
	//已逾期
	if(${actual_repayment_amount_round}!=${expect_overdue_repay}){
		Failure=true;
		FailureMessage=&quot;实际应还金额计算不正确,实际值：&quot;+${actual_repayment_amount_round}+&quot;正确值为：&quot;+&quot;${expect_overdue_repay}&quot;;
	}
	else{
		FailureMessage=&quot;实际应还金额计算正确：&quot;+${actual_repayment_amount_round};
		}
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="从数据库提取子产品信息--可不用" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取手续费付款方式fee_payment_type" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select fee_payment_type from product.sub_products where product_code=&apos;PANDA&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取fee_payment_type" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">fee_payment_type</stringProp>
              <stringProp name="RegexExtractor.regex">fee_payment_type\s(.*?)\s</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;fee_payment_type:${fee_payment_type}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取合同金额类型contract_amount_type" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select contract_amount_type from product.sub_products where product_code=&apos;PANDA&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取contract_amount_type" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">contract_amount_type</stringProp>
              <stringProp name="RegexExtractor.regex">contract_amount_type\s(.*?)\s</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;contract_amount_type:${contract_amount_type}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取借款期限loan_period" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select loan_period from product.sub_products where product_code=&apos;PANDA&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取loan_period" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loan_period</stringProp>
              <stringProp name="RegexExtractor.regex">loan_period\s(.*?)\s</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;loan_period:${loan_period}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取利息interest_rate" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select interest_rate from product.sub_products where product_code=&apos;PANDA&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取利息费率interest_rate" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">interest_rate</stringProp>
              <stringProp name="RegexExtractor.regex">interest_rate\s(.*?)\s</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;interest_rate:${interest_rate}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取服务费率service_fee" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select service_fee from product.sub_products where product_code=&apos;PANDA&apos; and sub_product_code=&apos;${sub_product_code}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">interest_rate,service_fee,fee_payment_type </stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器--提取service_fee" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">service_fee</stringProp>
              <stringProp name="RegexExtractor.regex">service_fee\s(.*?)\s</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;service_fee:${service_fee}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler---日期debug" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
String date1=&quot;2019-07-14&quot;;
String date2=&quot;2019-07-05&quot;;
SimpleDateFormat format=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date d1=format.parse(date1);
Date d2=format.parse(date2);
long daysbetween=(d1.getTime()-d2.getTime()+1000000)/(60*60*24*1000);
vars.put(&quot;daysbetween&quot;,daysbetween.toString());</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${daysbetween}" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="金额计算--备份内容" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="提取子产品code" enabled="true">
            <stringProp name="dataSource">product</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sub_product_code,loan_period,interest_rate,service_fee,fee_payment_type from product.sub_products where product_code=&apos;PANDA&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--double类型" enabled="false">
            <stringProp name="BeanShellSampler.query">import com.zhtx.jmeter.DoubleArith;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
double apply_money=1000; //申请金额
double qi_xian=10; //期限
double day_rate=0.005; //日利率
double day_fee=0.03;  //日服务费
//合同金额类型为申请金额
String contract_amount_type=&quot;SAME_APPLY&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;WHOLE_SF&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额==申请金额
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		double actual=apply_money*(1-day_fee*qi_xian);
		double SF_actual=DoubleArith.round(actual,2); //到账金额
		double repay=apply_money*(1+day_rate*qi_xian);
		double SF_repay=DoubleArith.round(repay,2); //到期应还金额
		System.out.println(SF_actual+&quot; &quot;+SF_repay);
		vars.put(&quot;11&quot;,String.valueOf(SF_repay));
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		double actual_01=apply_money*(1-day_rate*qi_xian); 
		double IR_actual=DoubleArith.round(actual_01,2);//到账金额
		double repay_01=apply_money*(1+day_fee*qi_xian);
		double IR_repay=DoubleArith.round(repay_01,2);//应还金额
		System.out.println(IR_actual+&quot; &quot;+IR_repay);
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		double actual_02=apply_money*(1-(day_fee+day_rate)*qi_xian); 
		double SFIR_actual=DoubleArith.round(actual_02,2);//到账金额
		double SFIR_repay=apply_money;//应还金额
		System.out.println(SFIR_actual+&quot; &quot;+SFIR_repay);
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		double contract_amount=apply_money/(1-day_fee*qi_xian); 
		double  contract_money=DoubleArith.round(contract_amount,2);//合同金额
		
		double actual=contract_money*(1-day_fee*qi_xian);
		double SF_actual=DoubleArith.round(actual,2); //到账金额
		
		double repay=contract_money*(1+day_rate*qi_xian);
		double SF_repay=DoubleArith.round(repay,2); //到期应还金额
		System.out.println(contract_money+&quot; &quot;+SF_actual+&quot; &quot;+SF_repay);
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		double contract_amount=apply_money/(1-day_rate*qi_xian); 
		double  contract_money=DoubleArith.round(contract_amount,2);//合同金额
		
		double actual_01=contract_money*(1-day_rate*qi_xian); 
		double IR_actual=DoubleArith.round(actual_01,2);//到账金额
		
		double repay_01=contract_money*(1+day_fee*qi_xian);
		double IR_repay=DoubleArith.round(repay_01,2);//应还金额
		System.out.println(contract_money+&quot; &quot;+IR_actual+&quot; &quot;+IR_repay);
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		double contract_amount=apply_money/(1-(day_rate+day_fee)*qi_xian); 
		double  contract_money=DoubleArith.round(contract_amount,2);//合同金额
		
		double actual_02=contract_money*(1-(day_fee+day_rate)*qi_xian); 
		double SFIR_actual=DoubleArith.round(actual_02,2);//到账金额
		
		double SFIR_repay=contract_money;//应还金额
		System.out.println(contract_money+&quot; &quot;+SFIR_actual+&quot; &quot;+SFIR_repay);
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}
	}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--BigDecimal  --未参数化" enabled="false">
            <stringProp name="TestPlan.comments">加法 add()函数     减法subtract()函数
乘法multiply()函数    除法divide()函数    绝对值abs()函数
</stringProp>
            <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
BigDecimal apply_money=new BigDecimal(&quot;1000&quot;); //申请金额
BigDecimal qi_xian=new BigDecimal(&quot;10&quot;); //期限 loan_period
BigDecimal overdue_days=new BigDecimal(&quot;1&quot;);//逾期天数
BigDecimal day_rate=new BigDecimal(&quot;0.005&quot;); //日利率interest_rate
BigDecimal day_fee=new BigDecimal(&quot;0.03&quot;);  //日服务费service_fee
BigDecimal day_penalty=new BigDecimal(&quot;0.04&quot;);  //日罚息
BigDecimal  num=new BigDecimal(&quot;1&quot;); //基数
//合同金额类型为申请金额  fee_payment_type
String contract_amount_type=&quot;SAME_FEE_PAYMENT_TYPE&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;WHOLE_SF_IR&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
BigDecimal  result1=day_rate.multiply(qi_xian);  //日利率*借款期限
BigDecimal  result2=day_fee.multiply(qi_xian); //日服务费率*借款期限
BigDecimal result3=day_penalty.multiply(overdue_days);//日罚息率*逾期天数
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额=申请金额 利息：合同金额*日利息费率*借款期限  服务费：合同金额*日服务费率*借款期限
	
	BigDecimal interest=result1.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //合同等同申请，利息
	BigDecimal service_charge=result2.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP); //合同等同申请，服务费
	BigDecimal overdue_fee=result3.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP); //合同等同申请，逾期费用

	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		BigDecimal  arrival_amount=apply_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  arrival_amount=apply_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		BigDecimal result4=apply_money.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money; //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额类型为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{ 
		BigDecimal  result5=num.subtract(result2).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额
	
		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		BigDecimal repay_amount=contract_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  result5=num.subtract(result1).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额

		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=contract_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{	
	             BigDecimal result01=day_rate.add(day_fee);
	             BigDecimal result02=result01.multiply(qi_xian);
	            
		BigDecimal  result5=num.subtract(result02).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额

		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
	             
		BigDecimal result4=contract_money.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=contract_money; //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		
		System.out.println(contract_money+&quot; &quot;+arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${expect_contract_money},${expect_arrival_amount},${expect_repay_amount},${expect_overdue_repay}" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--BigDecimal  --未参数化" enabled="false">
            <stringProp name="TestPlan.comments">加法 add()函数     减法subtract()函数
乘法multiply()函数    除法divide()函数    绝对值abs()函数
</stringProp>
            <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
//contract_amount_type=SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
BigDecimal apply_money=new BigDecimal(&quot;1000&quot;); //申请金额
BigDecimal qi_xian=new BigDecimal(&quot;10&quot;); //期限 loan_period
BigDecimal overdue_days=new BigDecimal(&quot;1&quot;);//逾期天数
BigDecimal day_rate=new BigDecimal(&quot;0.005&quot;); //日利率interest_rate
BigDecimal day_fee=new BigDecimal(&quot;0.03&quot;);  //日服务费service_fee
BigDecimal day_penalty=new BigDecimal(&quot;0.04&quot;);  //日罚息
BigDecimal  num=new BigDecimal(&quot;1&quot;); //基数
//合同金额类型为申请金额  fee_payment_type
String contract_amount_type=&quot;SAME_FEE_PAYMENT_TYPE&quot;;  //SAME_APPLY（申请金额），SAME_FEE_PAYMENT_TYPE（超发金额）
String fee_payment_type=&quot;WHOLE_SF_IR&quot;;//手续费付款方式，WHOLE_SF=趸交服务费;WHOLE_IR=趸交利息;WHOLE_SF_IR=趸交服务费+趸交利息
String[] expect_contract_type={&quot;SAME_APPLY&quot;,&quot;SAME_FEE_PAYMENT_TYPE&quot;};  
String[] expect_fee_type={&quot;WHOLE_SF&quot;,&quot;WHOLE_IR&quot;,&quot;WHOLE_SF_IR&quot;};
BigDecimal  result1=day_rate.multiply(qi_xian);  //日利率*借款期限
BigDecimal  result2=day_fee.multiply(qi_xian); //日服务费率*借款期限
BigDecimal result3=day_penalty.multiply(overdue_days);//日罚息率*逾期天数
if(contract_amount_type.equals(expect_contract_type[0]))
	{
	//合同金额=申请金额 利息：合同金额*日利息费率*借款期限  服务费：合同金额*日服务费率*借款期限
	
	BigDecimal interest=result1.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //合同等同申请，利息
	BigDecimal service_charge=result2.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP); //合同等同申请，服务费
	BigDecimal overdue_fee=result3.multiply(apply_money).setScale(0, BigDecimal.ROUND_HALF_UP); //合同等同申请，逾期费用

	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{
		BigDecimal  arrival_amount=apply_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  arrival_amount=apply_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{
		BigDecimal result4=apply_money.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=apply_money; //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}
//合同金额类型为超发金额
else if(contract_amount_type.equals(expect_contract_type[1]))
	{
	//WHOLE_SF=趸交服务费
	if(fee_payment_type.equals(expect_fee_type[0]))
		{ 
		BigDecimal  result5=num.subtract(result2).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额
	
		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money.subtract(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		BigDecimal repay_amount=contract_money.add(interest).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_IR=趸交利息
	else if(fee_payment_type.equals(expect_fee_type[1]))
		{
		BigDecimal  result5=num.subtract(result1).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额

		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
		
		BigDecimal  arrival_amount=contract_money.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=contract_money.add(service_charge).setScale(0,BigDecimal.ROUND_HALF_UP); //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		System.out.println(arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	//WHOLE_SF_IR=趸交服务费+趸交利息
	else if(fee_payment_type.equals(expect_fee_type[2]))
		{	
	             BigDecimal result01=day_rate.add(day_fee);
	             BigDecimal result02=result01.multiply(qi_xian);
	            
		BigDecimal  result5=num.subtract(result02).setScale(3,BigDecimal.ROUND_HALF_UP);
		BigDecimal  contract_money=apply_money.divide(result5,0,BigDecimal.ROUND_HALF_UP);//合同金额

		BigDecimal interest=result1.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP);  //超发金额，利息
	             BigDecimal service_charge=result2.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，服务费
	             BigDecimal overdue_fee=result3.multiply(contract_money).setScale(0, BigDecimal.ROUND_HALF_UP); //超发金额，逾期费用
	             
		BigDecimal result4=contract_money.subtract(service_charge);
		BigDecimal  arrival_amount=result4.subtract(interest).setScale(0,BigDecimal.ROUND_HALF_UP);//到账金额
		
		BigDecimal repay_amount=contract_money; //到期应还
		
		BigDecimal overdue_repay=repay_amount.add(overdue_fee).setScale(0,BigDecimal.ROUND_HALF_UP); //逾期总应还
		
		System.out.println(contract_money+&quot; &quot;+arrival_amount+&quot; &quot;+repay_amount+&quot; &quot;+overdue_repay);
		vars.put(&quot;expect_contract_money&quot;,contract_money.toString()); //合同金额
		vars.put(&quot;expect_arrival_amount&quot;,arrival_amount.toString()); //到账金额
		vars.put(&quot;expect_repay_amount&quot;,repay_amount.toString()); //到期应还
		vars.put(&quot;expect_overdue_repay&quot;,overdue_repay.toString()); //逾期应还
		}
	else{
		System.out.println(&quot;未匹配到任何值&quot;);	
		}	
	}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="TestPlan.comments">vars.put(&quot;data2&quot;,str3);
String str4=str3+str2;</stringProp>
          <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
public String roundValue(String amount ){
	BigDecimal rosa=new BigDecimal(&quot;2052632&quot;); 
	String  str=rosa.toString();
	String str2_after=str.substring(str.length()-3,str.length());  //vars.put(&quot;data&quot;,str2);
	String str3_before=str.substring(0,str.length()-3);//vars.put(&quot;data3&quot;,str4);
	int aa=Integer.parseInt(str2_after);
	if(aa&gt;=500){
	String bb=&quot;500&quot;;
	String cc=str3_before+bb;
	}
	else{
	String bb=&quot;000&quot;;
	String cc=str3_before+bb;
	}
	return cc;
}
public class rosa{
	}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler--${data},${data2},${data3}" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--备份取整code" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.math.BigDecimal;
BigDecimal rosa=new BigDecimal(&quot;2052632&quot;); 
String  str=rosa.toString();
String str2_after=str.substring(str.length()-3,str.length());  //vars.put(&quot;data&quot;,str2);
String str3_before=str.substring(0,str.length()-3);//vars.put(&quot;data3&quot;,str4);
int aa=Integer.parseInt(str2_after);
if(aa&gt;=500){
	String bb=&quot;500&quot;;
	String cc=str3_before+bb;
	vars.put(&quot;data&quot;,cc);
	}
else{
	String bb=&quot;000&quot;;
	String cc=str3_before+bb;
	vars.put(&quot;data&quot;,cc);
	}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="放款模拟支付" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tradeStatus&quot;:&quot;success&quot;,&#xd;
    &quot;tradeMsg&quot;:&quot;交易成功&quot;,&#xd;
    &quot;channelCode&quot;:&quot;dokypay&quot;,&#xd;
    &quot;channelBizCode&quot;:&quot;loan_fintech_dokypay&quot;,&#xd;
    &quot;transactionCode&quot;:&quot;17d2586f2b6840e7996f76cc53e0aa54&quot;,&#xd;
    &quot;outTradeNo&quot;:&quot;00f3c47a89cc4ea39081d0eae2184944&quot;,&#xd;
    &quot;passBack&quot;:{&#xd;
        &quot;payOrderId&quot;:&quot;1563532016665000001&quot;&#xd;
    },&#xd;
    &quot;originChannelCallBack&quot;:{&#xd;
        &quot;amount&quot;:&quot;664000.00&quot;,&#xd;
        &quot;tradeNo&quot;:&quot;20190718195153731022514270&quot;,&#xd;
        &quot;createTime&quot;:&quot;2019-07-18 19:51:54&quot;,&#xd;
        &quot;totalFee&quot;:&quot;7000.00&quot;,&#xd;
        &quot;merTransNo&quot;:&quot;17d2586f2b6840e7996f76cc53e0aa54&quot;,&#xd;
        &quot;tradeStatus&quot;:&quot;success&quot;,&#xd;
        &quot;sign&quot;:&quot;15197c780945f6516867a6f13df13e9f988e72287792af7bcd638adcc89f7d68&quot;,&#xd;
        &quot;currency&quot;:&quot;IDR&quot;,&#xd;
        &quot;updateTime&quot;:&quot;2019-07-18 19:52:14&quot;&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">dev-sit-ind.pinganzhiyuan.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bizserver/payment/notify/dokypay/payNotify</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
